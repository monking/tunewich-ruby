#!/usr/bin/env ruby

# TODO: catch C-t, or something like it, to pass interactive commands to the script

require "open-uri"
require "optparse"
require "json"

module Tunewich
	class Player
		def initialize

			@sessionID = Random.rand(1024)
			@trackIndex = nil
			@tracks = nil
			@playlistName = nil
			@playlist = nil

			if ENV.key? 'TUNEWICH_DIR'
				setLibraryPath ENV['TUNEWICH_DIR']
			else
				puts "Please add `export TUNEWICH_DIR=\"<path/to/your/music/directory>\"` to your ~/.profile or similar file."
			end

			parseOptions

			if not @fileDirectory
				puts "please specify an input directory with -i"
				exit
			end

			if @tracks
				titleBlock "Playing #{@tracks.length} tracks", '#'
			else
				usePlaylist promptForPlaylist
				titleBlock "Playlist: #{@playlistName} (#{@tracks.length})", '#'
			end

			if @trackIndex == nil
				if @shuffle
					shuffleIndex()
				else
					@trackIndex = 0
				end
			elsif @trackIndex.to_i === 0
				@trackIndex = findTrackIndex @trackIndex
			else
				@trackIndex = @trackIndex.to_i
			end

			# TODO: catch SIGINT (ctrl+c) & prompt for playlist again
			playbackSuccessful = true
			while playbackSuccessful do
				playbackSuccessful = play @tracks[@trackIndex]
				nextTrack()
			end
		end

		private

		def parseOptions
			parser = OptionParser.new

			parser.on("-i", "--input-dir DIR", "Directory from which to read the playlist and files. NOTE: when used, this must be the first option. Recommended to define TUNEWICH_DIR instead.") do |inputDir|
				# FIXME: always process this option first, even if it's provided last
				setLibraryPath inputDir
			end
			parser.on("-t", "--track INDEX/QUERY", "If a number is given, seek to that track. If a string, the title of the track is searched for.") do |trackQuery|
				if trackQuery.to_i != 0
					@trackIndex = trackQuery.to_i - 1
				else
					@trackIndex = trackQuery
				end
			end
			parser.on("-a", "--add-track YOUTUBE_URL", "Add a track to the playlist and save.") do |url|
				# TODO: add multiple by accepting space-separated list of URLs
				@playlistName = promptForPlaylist if not @playlistName
				id = getYoutubeIdFromUrl url
				newTrack = createTrack id
				addTrackToPlaylist newTrack, @playlistName
				writeLibraryToFile
				exit
			end
			parser.on("-p", "--playlist QUERY", "Partial or full name of a playlist.") do |playlistQuery|
				usePlaylist findPlaylistName playlistQuery
			end
			parser.on("-P", "--create-playlist NAME", "Create a new playlist. Implies -p of the same playlist.") do |playlistName|
				createPlaylist playlistName
				writeLibraryToFile
				usePlaylist playlistName
			end
			parser.on("-r", "--rating MIN_RATING", "Only play tracks rated at least the minimum given.") do |rating|
				filterTracksByRating rating.to_i
			end
			parser.on("-d", "--enable-download", "Enable downloading files when encountering a playlist file without a cached file already download.") do
				@enableDownload = true
			end
			parser.on("-s", "--shuffle", "Enable shuffle.") do
				@shuffle = true
			end
			parser.on("-l", "--loop", "Loop, even if a track doesn't have an A/B loop defined.") do
				@loop = true
			end
			parser.on("-q", "--query QUERY", "Search YouTube for a video.") do |query|
				@tracks = searchYouTube query
			end
			parser.on("-w", "--write-after TIME", "Save tracks to the playlist (from -p or -P) when played for the given number of seconds. Use with -q.") do |time|
				@playthroughThreshold = time.to_f
			end
			parser.on("-h", "--help", "Show this help.") do
				puts parser.help()
				exit
			end

			@mplayerOverrideCommands = parser.parse(ARGV)
		end

		def setLibraryPath libraryPath
			@tunewichDirectory = libraryPath
			if not Dir.exist? @tunewichDirectory
				puts "Please create the directory '#{@tunewichDirectory}'."
				exit
			end

			@fileDirectory = "#{@tunewichDirectory}/music"
			Dir.mkdir @fileDirectory if not Dir.exist? @fileDirectory

			@libraryFilePath = "#{@tunewichDirectory}/tunewich-library.json"
			if not File.exist? @libraryFilePath
				raise "TODO: create library file at #{@libraryFilePath}"
			end

			@library = JSON.parse(File.read(@libraryFilePath))
		end

		def promptForPlaylist
			puts "Please choose a playlist (leave blank to play all):\n  #{@library['playlists'].keys.join "\n  "}"
			selectedListName = nil
			while !selectedListName do
				playlistQuery = STDIN.gets.chomp
				if not playlistQuery
					useEntireLibrary
					break
				end
				selectedListName = findPlaylistName playlistQuery
				if !selectedListName
					puts "No matches. Try again"
				end
			end

			selectedListName
		end

		def findTrackIndex(query)
			trackTitles = @tracks.map{|t| t['title']}
			findInList(query, trackTitles)[:index]
		end

		def findPlaylistName(query)
			findInList(query, @library['playlists'].keys)[:value]
		end

		def findInList(query, list)
			queryPattern = Regexp.new(query + '|' + query.gsub(/\s+/, '').split('').join('.*'), Regexp::IGNORECASE)
			matches = []
			list.each_with_index do |value, index|
				matchedPortion = queryPattern.match(value)
				if matchedPortion
					match = {
						:index => index,
						:value => value,
						:matchLength => matchedPortion[0].length
					};
					match[:density] = query.length.to_f / match[:matchLength].to_f
					match[:breadth] = match[:matchLength].to_f / match[:value].length.to_f
					match[:score] = (match[:breadth] + match[:density]) / 2
					matches.push(match)
				end
			end

			if matches.length === 0
				return false
			end

			matches.sort_by { |match| 1 - match[:score] } if matches.length > 1

			{:index => matches[0][:index], :value => matches[0][:value]}
		end

		def usePlaylist(name)
			@playlistName = name
			@playlist = @library['playlists'][@playlistName]
			@tracks = []
			@playlist['tracks'].each do |trackReference|
				@tracks.push @library['library'][trackReference]
			end
		end

		def useEntireLibrary
			@tracks = []
			@library['library'].keys.each do |trackKey|
				@tracks.push @library['library'][trackKey]
			end
		end

		def nextTrack
			if @shuffle
				shuffleIndex()
			else
				@trackIndex += 1
				@trackIndex %= @tracks.length
			end
		end

		def shuffleIndex
			@trackIndex = Random.rand(@tracks.length - 1)
		end

		def play(track)
			titleBlock "[#{@trackIndex + 1}] - #{@tracks[@trackIndex]['title']}"

			if not fileExistsFromID? track['src']
				if not @enableDownload
					streamName = 'youtube-stream'
					streamPath = mediaFilePath = makeStream streamName
				end

				if not downloadFromYouTubeID track['src'], streamPath
					return false
				end
			end

			mediaFilePath ||= findFile track['src']

			mplayerCommands = []

			# TODO: clean up these tests for streaming
			if track['loop'].kind_of?(Array)
				if !streamName
					duration = track['loop'][1] - track['loop'][0]

					mplayerInputFile = putInTempFile 'mplayer-input', "seek -999:00:00\n" # this is a silly way to do it. -100% doesn't work. Still, there's a moment of the audio heard before this command is run.
					mplayerCommands.push("-input file=#{mplayerInputFile}")

					# loop back from B to A
					mplayerCommands.push("-ss #{track['loop'][0]}")
					mplayerCommands.push("-endpos #{duration}")
				else
					titleBlock "This track has an A/B loop, but looping is not supported while streaming. Add the -d option to enable downloading."
				end
			end

			if !streamName
				mplayerCommands.push("-loop 0") if track['loop'] or @loop
			end

			mplayerCommands.push("-novideo")
			mplayerCommands += @mplayerOverrideCommands

			mplayerStartTime = Time.now.to_f

			mplayerStatus = system "mplayer \"#{mediaFilePath}\" #{mplayerCommands.join ' '}"

			mplayerEndTime = Time.now.to_f

			mplayerPlayTime = mplayerEndTime - mplayerStartTime
			if (@playthroughThreshold && mplayerPlayTime > @playthroughThreshold)
				puts "Played more than #{@playthroughThreshold}s, ading to playlist '#{@playlistName}'."
				track['title'] = getTrackTitle track['src'] # FIXME: assuming this is from a search, and the title was not fetched yet
				addTrackToPlaylist track, @playlistName if @playlistName
				writeLibraryToFile
			end

			deleteStream streamName if streamName
			deleteTempFile 'mplayer-input'

			mplayerStatus
		end

		def findFile(id)
			`ls -1 #{getFilePrefixFromId id}*`.strip
		end

		def fileExistsFromID?(id)
			system "ls -1 #{getFilePrefixFromId id}*"
		end

		def getFilePrefixFromId(id)
			"#{@fileDirectory}/tunewich-#{id}"
		end

		def downloadFromYouTubeID(id, streamPath = nil)
			puts "Downloading file (#{id})"

			youtubeDlCommandBegin = "youtube-dl -f bestaudio"
			youtubeDlCommandEnd = "-- #{id}"

			if streamPath
				streamPid = spawn("#{youtubeDlCommandBegin} -o - #{youtubeDlCommandEnd} > \"#{streamPath}\"")
				Process.detach(streamPid)
				return true
			else
				result = system "#{youtubeDlCommandBegin} -o \"#{getFilePrefixFromId id}-%(title)s.%(ext)s\" #{youtubeDlCommandEnd}"
				if not result
					puts "Download interrupted..."
				end
			end

			result
		end

		def titleBlock(message, fill = '=', width = 80)
			blockRow = fill * width
			padding = '  '
			marginSize = (width - message.length) / 2 - padding.length
			marginLeft = marginSize > 1 ? fill * marginSize : ''
			marginRight = marginLeft
			if message.length % 2 == 1 then marginRight += fill end
			puts "\n#{blockRow}"
			puts "#{marginLeft}#{padding}#{message}#{padding}#{marginRight}"
			puts blockRow
		end

		def getTempFilePath(name)
			"/tmp/tunewich-#{@sessionID}-#{name}"
		end

		def putInTempFile(name, value)
			path = getTempFilePath name
			File.write(path, value)
			path
		end

		def putInTempFile(name, value)
			path = getTempFilePath name
			File.write(path, value)
			path
		end

		def deleteTempFile(name)
			path = getTempFilePath name
			if File.exist? path
				File.delete path
			end
		end

		def makeStream(name)
			path = getTempFilePath name
			if File.exist? path
				raise "The temp file '#{name}' already exists. (#{path})"
			end
			if not system "mkfifo \"#{path}\""
				raise "ERROR: Could not create the stream file (#{path})"
			end
			path
		end

		def getYoutubeIdFromUrl url
			url.sub(/^.*v=/, '')
		end

		def filterTracksByRating rating
			@tracks.keep_if { |track| track['rating'] && track['rating'] >= rating }
		end

		def createPlaylist name, tracks = [], description = ''
			newPlaylist = {
				'description' => description,
				'public' => true,
				'tracks' => tracks
			}
			@library['playlists'][name] = newPlaylist
		end

		def getTrackTitle id
			puts "Fetching title for YouTube ID #{id}..."
			title = `youtube-dl --get-title -- #{id}`.chomp

			if title.empty?
				title = 'Unknown'
				puts "Video not found. Cannot get title."
			end

			title
		end

		def createTrack id, title = nil
			{
				'src' => id,
				'title' => title || getTrackTitle(id)
			}
		end

		def addTrackToLibrary track
			@library['library'][track['src']] ||= track
			@library['library'][track['src']]
		end

		def addTrackToPlaylist track, playlistName
			addTrackToLibrary track

			trackReference = track['src']
			tracks = @library['playlists'][playlistName]['tracks']
			if tracks.index trackReference === nil
				tracks.push trackReference
				puts "Saved '#{track['title']}' (#{trackReference}) to playlist '#{playlistName}'"
			else
				puts "Track '#{track['title']}' (#{trackReference}) is already in playlist '#{playlistName}'"
			end
		end

		def writeLibraryToFile
			libraryJSON = JSON.pretty_generate(@library)
			File.write(@libraryFilePath, libraryJSON) if libraryJSON
		end

		def searchYouTube query, offset = 0, count = 20
			puts "Searching YouTube for '#{query}'"
			resultsPerPage = 20
			page = (offset.to_f / resultsPerPage.to_f).to_i + 1
			queryParameter = URI::encode(query)
			queryUrl="https://www.youtube.com/results?search_query=#{queryParameter}&page=#{page}"

			queryResultIds = []
			open(queryUrl) do |handle|
				html = []
				handle.each_line { |line| html.push(line) }
				queryResultIds = html.grep(/href="\/watch/).map! do |line|
					line.sub!(/^.*watch\?v=([^\"&<]+).*\n/, '\1')
				end
				queryResultIds.uniq!
			end

			resultTracks = []
			queryResultIds.slice(0, count).each_with_index do |id, index|
				resultTracks.push createTrack id, "Search '#{query}': (#{id})"
			end

			resultTracks
		end

		alias deleteStream deleteTempFile

	end
end

Tunewich::Player.new
