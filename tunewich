#!/usr/bin/env ruby

require "open-uri"
require "optparse"
require "json"

module Tunewich

	class Player

		HELP_FILTER = "Filter by rules, in the format 'title=Some Title,tag=fun,chapters'. Available rules are: [min-,max-]rating=[0-5],title=[query],tag=[tag],chapters."

		def initialize
			@sessionID = Random.rand(1024)
			@trackIndex = nil
			@tracks = nil
			@trackFilters = nil
			@playlistName = nil
			@playlist = nil
			@enableDownload = false
			@keepUnattachedDownload = false

			if ENV.key? 'TUNEWICH_DIR'
				setLibraryPath ENV['TUNEWICH_DIR']
			else
				puts "Please add `export TUNEWICH_DIR=\"<path/to/your/music/directory>\"` to your ~/.profile or similar file."
			end

			parseOptions

			if not @fileDirectory
				puts "please specify an input directory with -i"
				exit
			end

			if @tracks
				titleBlock "Playing #{@tracks.length} tracks", '#'
			else
				if selectedListName = promptForPlaylist
					usePlaylist selectedListName
					titleBlock "Playlist: #{@playlistName} (#{@tracks.length})", '#'
				end
			end

			if @trackFilters
				@tracks = filterTracks @tracks, @trackFilters
			end

			if @trackIndex == nil
				if @shuffle
					shuffleIndex()
				else
					@trackIndex = 0
				end
			elsif @trackIndex.is_a? String and @trackIndex != '0'
				@trackIndex = findTrackIndex @trackIndex
			else
				@trackIndex = @trackIndex.to_i
			end

			# TODO: catch SIGINT (ctrl+c) & prompt for playlist again
			playbackSuccessful = true
			commandRequiresBreak = false
			commandRequiresNext = false

			interactiveCommands = {
				'quit' => {
					'action' => Proc.new {
						puts "quitting..."
						commandRequiresBreak = true
					}
				},
				'skip' => {
					'action' => Proc.new {
						puts "skipping..."
						nextTrack()
						commandRequiresNext = true
					}
				},
				'loop' => {
					'action' => Proc.new {
						@loop = !@loop
						puts "loop: #{@loop ? 'on' : 'off'}"
					}
				},
				'shuffle' => {
					'action' => Proc.new {
						@shuffle = !@shuffle
						puts "shuffle: #{@shuffle ? 'on' : 'off'}"
					}
				}
			}

			while playbackSuccessful do

				break if !@trackIndex || !@tracks[@trackIndex]

				titleBlock "[#{@trackIndex + 1}] - #{@tracks[@trackIndex]['title']}"

				if @updateAllPlayedTrackInfo || !@tracks[@trackIndex].has_key?('duration') # TODO: remove the 'duration' check: it's here just until the library is more up-to-date
					printRepeat "Getting latest track information..."
					updateTrackInfo @tracks[@trackIndex]
					writeLibraryToFile
				end

				chapterIndex = nil
				if @tracks[@trackIndex]['chapters']

					commandRequiresBreak = false
					commandRequiresNext = false

					chapterPromptMessage = nil
					if !fileExistsFromId?(@tracks[@trackIndex]['src']) && !@enableDownload # TODO: checking fileExists, and checking again inside self.play
						chapterPromptMessage = "NOTE: Choosing a chapter will cause the file to download fully before playing."
					end
					chapterResponse = promptForChapterIndex @tracks[@trackIndex]['chapters'], interactiveCommands, chapterPromptMessage
					chapterIndex = chapterResponse[:index]

					next if commandRequiresNext
					break if commandRequiresBreak

				end

				# TODO: catch C-t, or something like it, to pass commands to the script during playback
				#  -: rating down
				#  +: rating up
				#  1-5: explicit rating
				#  t: prompt for tag
				#  x: remove from library
				#  d: download
				playbackSuccessful = play @tracks[@trackIndex], chapterIndex

				nextTrack() if not chapterIndex # if a chapter was selected, prompt again in the next iteration

			end
		end

		private

		def parseOptions
			parser = OptionParser.new

			parser.on("-a", "--add-track YOUTUBE_URL", "Add a track to the playlist and save.") do |url|
				# TODO: add multiple by accepting space-separated list of URLs
				@playlistName = promptForPlaylist if not @playlistName
				id = getYoutubeIdFromUrl url
				newTrack = createTrack id
				trackReference = addTrackToLibrary updateTrackInfo newTrack
				addTrackReferenceToPlaylist trackReference, @playlistName
				writeLibraryToFile
				exit
			end

			parser.on("-c", "--clean", "Enter an interactive cleanup mode, to remove unwanted items from the library.") do
				interactiveCleanup
				exit
			end

			parser.on("-d", "--enable-download", "Enable downloading files when encountering a playlist file without a cached file already download.") do
				@enableDownload = true
			end

			parser.on("-D", "--keep-download", "Keep the downloaded file. Normally the file will be removed after playback, unless it belongs to a playlist.") do
				@keepUnattachedDownload = true
			end

			parser.on("-f", "--filter RULES", Player::HELP_FILTER) do |rules|
				@trackFilters = parseOptionParameters rules
			end

			parser.on("-h", "--help", "Show this help.") do
				puts parser.help()
				exit
			end

			parser.on("-i", "--input-dir DIR", "Directory from which to read the playlist and files. NOTE: when used, this must be the first option. Recommended to define TUNEWICH_DIR instead.") do |inputDir|
				# FIXME: always process this option first, even if it's provided last
				setLibraryPath inputDir
			end

			parser.on("-l", "--loop", "Loop, even if a track doesn't have an A/B loop defined.") do
				@loop = true
			end

			parser.on("-p", "--playlist QUERY", "Partial or full name of a playlist.") do |playlistQuery|
				playlistName = findPlaylistName playlistQuery

				if playlistName
					usePlaylist playlistName
				else
					puts "No playlist found to match query #{playlistQuery}."
				end
			end

			parser.on("-P", "--create-playlist NAME", "Create a new playlist. Implies -p of the same playlist. When used with -w and -q, you may pass an empty string (\"\") to use the search query as the playlist name.") do |playlistName|
				if !playlistName.empty?
					createPlaylist playlistName
					usePlaylist playlistName
				elsif @youtubeSearch
					createPlaylist @youtubeSearch
					usePlaylist @youtubeSearch
				else
					puts "Please give a playlist name to -P"
					exit
				end

				writeLibraryToFile
			end

			parser.on("-q", "--query QUERY", "Search YouTube for a video.") do |query|
				@youtubeSearch = query
				@tracks = searchYouTube @youtubeSearch
			end

			parser.on("-s", "--shuffle", "Enable shuffle.") do
				@shuffle = true
			end

			parser.on("-t", "--track INDEX/QUERY", "Seek to the given track (either by its number in the list, or by its name).") do |trackQuery|
				if trackQuery.to_i != 0
					@trackIndex = trackQuery.to_i - 1
				else
					@trackIndex = trackQuery
				end
			end

			parser.on("-u", "--update-track-info", "Fetch updated track information for every track played.") do
				@updateAllPlayedTrackInfo = true
			end

			parser.on("-w", "--write-after TIME", "Save tracks to the library when played for the given number of seconds. Use with -q. If a playlist is specified, it will also be added to that playlist.") do |time|
				@playthroughThreshold = time.to_f
			end

			@mplayerOverrideCommands = parser.parse(ARGV)
		end

		def setLibraryPath libraryPath
			@tunewichDirectory = libraryPath
			if not Dir.exist? @tunewichDirectory
				puts "Please create the directory '#{@tunewichDirectory}'."
				exit
			end

			@fileDirectory = "#{@tunewichDirectory}/music"
			Dir.mkdir @fileDirectory if not Dir.exist? @fileDirectory

			@libraryFilePath = "#{@tunewichDirectory}/tunewich-library.json"
			if not File.exist? @libraryFilePath
				raise "TODO: create library file at #{@libraryFilePath}"
			end

			@library = JSON.parse(File.read(@libraryFilePath))
		end

		def promptForPlaylist
			puts "Please choose a playlist (leave blank to play all):\n  #{@library['playlists'].keys.join "\n  "}"
			selectedListName = nil
			while !selectedListName do
				playlistQuery = commandPrompt[:input]

				if not playlistQuery or playlistQuery.length === 0
					useEntireLibrary
					break
				end

				selectedListName = findPlaylistName playlistQuery

				if not selectedListName
					puts "No matches. Try again"
				end

			end

			selectedListName
		end

		def promptForChapterIndex chapters, commands = nil, message = nil
			selectedChapterIndex = nil

			chapterList = chapters.map { |chapter| "#{chapter['time']} - #{chapter['name']}" }
			puts "Please choose a chapter (leave blank to play first):\n  #{chapterList.join "\n  "}"
			puts message if message

			while not selectedChapterIndex do

				chapterResponse = commandPrompt commands
				chapterQuery = chapterResponse[:input]
				break if not chapterQuery or chapterQuery.length === 0

				selectedChapter = firstFuzzyMatch chapterQuery, chapterList

				if selectedChapter
					selectedChapterIndex = selectedChapter[:index]
					break
				else
					puts "No matches. Try again."
				end

			end

			{
				:index => selectedChapterIndex,
				:commands => chapterResponse[:commands]
			}
		end

		def getTrackTitles tracks
			tracks.map{|t| t['title']}
		end

		def findTrackIndex(query)
			match = firstFuzzyMatch query, getTrackTitles(@tracks)
			match ? match[:index] : false
		end

		def findPlaylistName(query)
			match = firstFuzzyMatch query, @library['playlists'].keys
			match ? match[:value] : false
		end

		def fuzzyStringSearchInList(query, list)
			queryPattern = Regexp.new(query + '|' + query.gsub(/\s+/, '').split('').join('.*'), Regexp::IGNORECASE)
			matches = []
			list.each_with_index do |value, index|
				matchedPortion = queryPattern.match(value)

				if matchedPortion
					match = {
						:index => index,
						:value => value,
						:matchLength => matchedPortion[0].length
					};
					match[:density] = query.length.to_f / match[:matchLength].to_f
					match[:breadth] = match[:matchLength].to_f / match[:value].length.to_f
					match[:score] = match[:density] * 10 + match[:breadth]
					matches << match
				end

			end

			if matches.length > 1
				matches.sort! { |a,b| b[:score] <=> a[:score] }
			end

			matches
		end

		def firstFuzzyMatch(query, list)
			matches = fuzzyStringSearchInList query, list
			matches.length ? matches[0] : false
		end

		def usePlaylist(name)
			@playlistName = name
			@playlist = @library['playlists'][@playlistName]
			@tracks = []

			@playlist['tracks'].each do |trackReference|
				@tracks << @library['library'][trackReference]
			end
		end

		def useEntireLibrary
			@tracks = []

			@library['library'].keys.each do |trackKey|
				@tracks << @library['library'][trackKey]
			end
		end

		def nextTrack

			if @shuffle
				shuffleIndex()
			else
				@trackIndex += 1

				if @trackIndex > @tracks.length - 1

					if @youtubeSearchPage
						@youtubeSearchPage += 1
						@tracks += searchYouTube(@youtubeSearchQuery, (@youtubeSearchPage - 1) * 20)
					else
						@trackIndex %= @tracks.length
					end

				end

			end

		end

		def shuffleIndex
			@trackIndex = Random.rand(@tracks.length - 1) if @tracks.length > 1
		end

		def play(track, chapterIndex)
			mplayerCommands = []
			fileAlreadyExists = fileExistsFromId? track['src']
			streaming = !fileAlreadyExists && !@enableDownload && !chapterIndex

			if track['chapters']

				if chapterIndex

					if not streaming
						titleBlock "Chapter #{chapterIndex + 1}: #{track['chapters'][chapterIndex]['name']}"
						offsetSeconds = getSecondsFromDurationString track['chapters'][chapterIndex]['time']
						mplayerCommands << "-ss #{offsetSeconds}"

						if chapterIndex < track['chapters'].length - 1
							nextTrackoffsetSeconds = getSecondsFromDurationString track['chapters'][chapterIndex + 1]['time']
							mplayerCommands << "-endpos #{nextTrackoffsetSeconds - offsetSeconds}"
						end

					else
						titleBlock "This track has chapters, but seeking backward is not supported while streaming. Add the -d option to enable downloading."
					end

				else
					titleBlock "Playing all chapters in track"
				end

			elsif track['loop'].kind_of?(Array)

				if not streaming
					duration = track['loop'][1] - track['loop'][0]

					mplayerInputFile = putInTempFile 'mplayer-input', "seek -999:00:00\n" # this is a silly way to do it. -100% doesn't work. Still, there's a moment of the audio heard before this command is run.
					mplayerCommands << "-input file=#{mplayerInputFile}"

					# loop back from B to A
					mplayerCommands << "-ss #{track['loop'][0]}"
					mplayerCommands << "-endpos #{duration}"
				else
					titleBlock "This track has an A/B loop, but looping is not supported while streaming. Add the -d option to enable downloading."
				end

			end

			if not fileAlreadyExists

				if streaming
					streamName = 'youtube-stream'
					streamPath = mediaFilePath = makeStream streamName
				end

				if not downloadTrack track, streamPath
					return false
				end

			end

			mediaFilePath ||= findFileById track['src']

			if not mediaFilePath
				puts "File not found for #{track['title']}."
				return false
			end

			if !streamName
				mplayerCommands << "-loop 0" if track['loop'] or @loop
			end

			mplayerCommands += ["-novideo", "-af scaletempo"]
			mplayerCommands += @mplayerOverrideCommands

			mplayerStartTime = Time.now.to_f

			mplayerStatus = system "mplayer \"#{mediaFilePath}\" #{mplayerCommands.join ' '}"

			mplayerEndTime = Time.now.to_f

			mplayerPlayTime = mplayerEndTime - mplayerStartTime
			if (@playthroughThreshold && mplayerPlayTime > @playthroughThreshold)
				puts "Played more than #{@playthroughThreshold}s, adding to #{@playlistName ? "playlist '#{@playlistName}'" : 'library'}."
				trackReference = addTrackToLibrary track
				addTrackReferenceToPlaylist trackReference, @playlistName if @playlistName
				writeLibraryToFile
			end

			if streaming
				deleteStream streamName
			elsif !fileAlreadyExists && track['unattached'] && !@keepUnattachedDownload
				deleteFileById track['src']
				titleBlock "UNATTACHED DOWNLOAD DELETED", 'X'
			end

			deleteTempFile 'mplayer-input' if mplayerInputFile

			mplayerStatus
		end

		def deleteFileById(id)
			`rm #{getFilePrefixFromId id}*`
		end

		def countFilesById(id)
			findFileById(id).lines.length
		end

		def findFileById(id)
			`ls -1 #{getFilePrefixFromId id}*`.strip
		end

		def fileExistsFromId?(id)
			system "ls -1 #{getFilePrefixFromId id}* &> /dev/null"
		end

		def fileSizeById(id)
			`size #{getFilePrefixFromId id}*`
		end

		def getFilePrefixFromId(id)
			"#{@fileDirectory}/tunewich-#{id}"
		end

		def downloadTrack(track, streamPath = nil)
			youtubeDlCommandBegin = "youtube-dl -f bestaudio --no-part"
			youtubeDlCommandEnd = "-- #{track['src']}"

			downloadPid = nil
			downloadFeedbackFile = createTempFile 'download-feedback'

			if streamPath
				downloadPid = spawn("#{youtubeDlCommandBegin} -o - #{youtubeDlCommandEnd} > \"#{streamPath}\" 2> \"#{downloadFeedbackFile}\"")
			else
				# status = system "#{youtubeDlCommandBegin} -o \"#{getFilePrefixFromId track['src']}-%(title)s.%(ext)s\" #{youtubeDlCommandEnd}"
				downloadPid = spawn("#{youtubeDlCommandBegin} -o \"#{getFilePrefixFromId track['src']}-%(title)s.%(ext)s\" #{youtubeDlCommandEnd} &> \"#{downloadFeedbackFile}\"")
				Process.detach(downloadPid)

				while not fileExistsFromId? track['src'] # FIXME: event driven approach to waiting for a file?
					printRepeat "Fetching video information for download (#{cliRotate})"
					sleep 0.1
				end

				# TODO: see FIXME below
				# if track.has_key? 'duration'
				# 	trackDuration = getSecondsFromDurationString track['duration']
				# 	bufferDuration = trackDuration / 2
				# end

				while true
					output = tailTempFile 'download-feedback'
					# FIXME: get mplayer to play the whole file, even if only part is downloaded when it starts
					# if trackDuration
					# 	etaMatch = output.match(/ETA ([0-9:]+)/)
					# 	if etaMatch
					# 		eta = getSecondsFromDurationString etaMatch[1]
					# 		if eta < bufferDuration
					# 			printRepeat "ETA (#{eta}) is less than #{bufferDuration}. Ready to play.\n"
					# 			break
					# 		end
					# 	end
					# end
					break if output.match(/#{track['src']}|100(\.0)?%/)
					printRepeat "(#{cliRotate}) #{output}"
					sleep 0.1
				end

				sleep 1 # FIXME: remove `sleep` in favor of checking if the right file exists yet
			end

			deleteTempFile 'download-feedback'

			downloadPid
		end

		def titleBlock(message, fill = '=', width = 80)
			blockRow = fill * width
			padding = '  '
			marginSize = (width - message.length) / 2 - padding.length
			marginLeft = marginSize > 1 ? fill * marginSize : ''
			marginRight = marginLeft
			marginRight += fill if message.length % 2 == 1
			puts "\n#{blockRow}"
			puts "#{marginLeft}#{padding}#{message}#{padding}#{marginRight}"
			puts blockRow
		end

		def getTempFilePath(name)
			"/tmp/tunewich-#{@sessionID}-#{name}"
		end

		def createTempFile(name)
			putInTempFile name, ''
		end

		def putInTempFile(name, value)
			path = getTempFilePath name
			File.write(path, value)
			path
		end

		def readTempFile(name)
			path = getTempFilePath name

			if File.exist? path
				return File.read path
			end
		end

		def tailTempFile(name)
			content = readTempFile name
			lastLine = content.gsub("\r","\n").lines.pop
			lastLine.strip.chomp
		end

		def deleteTempFile(name)
			path = getTempFilePath name

			if File.exist? path
				File.delete path
			end
		end

		def makeStream(name)
			path = getTempFilePath name

			if File.exist? path
				raise "The temp file '#{name}' already exists. (#{path})"
			end

			if not system "mkfifo \"#{path}\""
				raise "ERROR: Could not create the stream file (#{path})"
			end

			path
		end

		def getYoutubeIdFromUrl url
			url.sub(/^.*v=/, '')
		end

		def filterTracks tracks, filters

			if filters['rating']
				tracks.keep_if { |track| track['rating'] && track['rating'] == filters['rating'].to_i }
			end

			if filters['min-rating']
				tracks.keep_if { |track| track['rating'] && track['rating'] >= filters['min-rating'].to_i }
			end

			if filters['max-rating']
				tracks.keep_if { |track| !track['rating'] || track['rating'] <= filters['max-rating'].to_i }
			end

			if filters['tag']
				taggedPlaylistTrackIds = []
				@library['playlists'].each { |name, p| taggedPlaylistTrackIds += p['tracks'] if p['tags'] && p['tags'].find_index(filters['tag']) }
				tracks.keep_if { |t| taggedPlaylistTrackIds.find_index(t['src']) }

				if tracks.length === 0 # list available tags if no matches
					allTags = []
					@library['playlists'].each { |name, p| allTags += p['tags'] if p['tags'] }
					puts "No matches. Available tags are: #{allTags.uniq.sort.join ", "}"
				end
			end

			if filters['title']
				matches = fuzzyStringSearchInList(filters['title'], getTrackTitles(tracks))
				oldTracks = tracks
				tracks = []
				matches.each { |match|
					tracks << oldTracks[match[:index]]
				}
			end

			if filters.has_key? 'chapters'
				tracks.keep_if { |track|
					if track
						track.has_key? 'chapters'
					else
						false
					end
				}
			end

			tracks

		end

		def createPlaylist name, tracks = [], description = ''
			newPlaylist = {
				'description' => description,
				'public' => true,
				'tracks' => tracks
			}
			@library['playlists'][name] = newPlaylist
		end

		def createTrack id
			{
				'id' => id,
				'src' => id, # NOTE: assuming ID is a YouTube video ID, so that it's also the "src"
				'unattached' => true
			}
		end

		def getTrackInfo id
			info = `youtube-dl --get-title --get-description --get-duration -- #{id}`.chomp.lines
			track = {
				'title' => info.shift.chomp, # title is the first line
				'duration' => info.pop.chomp, # duration is the last line
				'description' => info.join("\n").chomp # everything else is description
			}

			track
		end

		def updateTrackInfo track
			trackInfo = getTrackInfo track['src']
			track['title'] = trackInfo['title']

			if trackInfo['description']
				chapters = getChaptersFromDescription trackInfo['description'].lines
				track['chapters'] = chapters if chapters && chapters.length > 0
			end

			track['duration'] = trackInfo['duration'] if trackInfo['duration']

			track
		end

		def getChaptersFromDescription description
			description.grep(/[0-9]+:[0-9:.]+/).map! do |line|
				matches = line.match(/^(.*?)[ (]*([0-9]+:[0-9:.]+)[ )]*(.*)$/)
				{
					'time' => matches[2],
					'name' => "#{matches[1]} #{matches[3]}".gsub(/^[^0-z]/, '').strip
				}
			end
		end

		def addTrackToLibrary track
			track.delete 'unattached' if track.has_key? 'unattached'
			trackReference = track['src']
			@library['library'][trackReference] ||= track

			trackReference
		end

		def addTrackReferenceToPlaylist trackReference, playlistName
			tracks = @library['playlists'][playlistName]['tracks']
			track = @library['library'][trackReference]

			if not tracks.index trackReference
				tracks << trackReference
				puts "Saved '#{track['title']}' (#{trackReference}) to playlist '#{playlistName}'"
			else
				puts "Track '#{track['title']}' (#{trackReference}) is already in playlist '#{playlistName}'"
			end
		end

		def writeLibraryToFile
			libraryJSON = JSON.pretty_generate(@library)
			File.write(@libraryFilePath, libraryJSON) if libraryJSON
			puts "Saved change to library file."
		end

		def searchYouTube query, offset = 0, count = 20
			puts "Searching YouTube for '#{query}'"
			resultsPerPage = 20
			page = (offset.to_f / resultsPerPage.to_f).to_i + 1
			queryParameter = URI::encode(query)
			queryUrl="https://www.youtube.com/results?search_query=#{queryParameter}&page=#{page}"

			queryResultIds = []
			open(queryUrl) do |handle|
				html = []
				handle.each_line { |line| html << line }

				queryResultIds = html.grep(/href="\/watch/).map! do |line|
					line.sub!(/^.*watch\?v=([^\"&<]+).*\n/, '\1')
				end

				queryResultIds.uniq!
			end

			threads = []
			resultTracks = []
			receivedCount = 0
			printRepeat "Getting track information (#{receivedCount}/#{queryResultIds.length})"

			queryResultIds.each do |id|
				track = createTrack id
				resultTracks << track
				threads << Thread.new {
					updateTrackInfo track
					receivedCount += 1
					printRepeat "Getting track information (#{receivedCount}/#{queryResultIds.length})"
				}
			end

			threads.each { |thr| thr.join }
			print "\n"

			resultTracks
		end

		def interactiveCleanup
			libraryCleanupSegment = {}

			commands = {
				'unlisted' => {
					'info' => 'select all tracks not in any playlist',
					'action' => Proc.new {

						unattachedTracks = {}

						@library['library'].map { |id, t| unattachedTracks[id] = t }

						@library['playlists'].each do |name, playlist|
							playlist['tracks'].each do |id|
								unattachedTracks.delete id if unattachedTracks.has_key? id
							end
						end

						if unattachedTracks.length > 0
							unattachedTracks.each { |id, track| libraryCleanupSegment[id] = track }
							puts "#{listTrackTitles libraryCleanupSegment}\n\n(#{libraryCleanupSegment.length} tracks selected)"
						else
							puts "Every track is assigned to a playlist. No suggestions for cleanup."
						end

					}
				},
				'all' => {
					'info' => 'select all tracks in the library',
					'action' => Proc.new {
						libraryCleanupSegment = cloneLibrary @library['library']
						puts "All tracks selected (#{libraryCleanupSegment.length})"
					}
				},
				'add' => {
					'info' => '<playlistName> add selection to a playlist.',
					'action' => Proc.new { |playlistQuery|
						if playlistQuery && playlistQuery.length > 0
							playlistName = findPlaylistName playlistQuery

							if playlistName
								libraryCleanupSegment.keys.each { |id| addTrackReferenceToPlaylist id, playlistName }
							elsif confirm "No existing playlist matching '#{playlistQuery}'. Create one?"
								createPlaylist playlistName, libraryCleanupSegment.keys
							else
								playlistName = nil
							end

							if playlistName
								libraryCleanupSegment = {}
								puts "Added #{libraryCleanupSegment.length} tracks to playlist '#{playlistName}'"
							else
								puts "No change"
							end
						else
							puts "#{@library['playlists'].map { |name, p| name } .join "\n"}\n\nPlease specify a playlist name (new or existing)."
						end

					}
				},
				'filter' => {
					'info' => Player::HELP_FILTER,
					'action' => Proc.new { |filterString|
						libraryCleanupSegment = cloneLibrary @library['library'] if libraryCleanupSegment.length == 0
						# FIXME: lots of back and forth from arrays to hashes here. Want to pick one?
						libraryCleanupSegment = cloneTracksToLibrary filterTracks cloneLibraryToTracks(libraryCleanupSegment), parseOptionParameters(filterString)
						puts "#{libraryCleanupSegment.length} tracks selected"
					}
				},
				'edit' => {
					'info' => 'edit selection in Vim',
					'action' => Proc.new {
						putInTempFile 'cleanup', listTrackTitles(libraryCleanupSegment)
						system "vim #{getTempFilePath 'cleanup'}"
						libraryCleanupSegment = getTracksFromTitleList readTempFile('cleanup')
						deleteTempFile 'cleanup'
						puts "#{listTrackTitles libraryCleanupSegment}\n\n(#{libraryCleanupSegment.length} tracks selected)"
					}
				},
				'clear' => {
					'info' => 'clear the selection',
					'action' => Proc.new {
						libraryCleanupSegment = {}
						puts "0 tracks selected"
					}
				},
				'rm' => {
					'info' => 'remove selected tracks',
					'action' => Proc.new {
						initialLibraryLength = @library['library'].length
						libraryCleanupSegment.each do |id, track|
							@library['library'].delete id
							playlistMatches = []
							@library['playlists'].each { |playlistName, p|
								index = p['tracks'].index id
								if index
									playlistMatches << playlistName
									p['tracks'].delete_at index
								end
							}
						end
						checksum = initialLibraryLength - libraryCleanupSegment.length == @library['library'].length
						checksumString = "#{initialLibraryLength} - #{libraryCleanupSegment.length} == #{@library['library'].length}"
						puts "#{checksumString} ... #{checksum ? 'OK' : 'Mismatch'}"
						libraryCleanupSegment = {}
					}
				}
			}

			confirmMsg = "Choose a command, or \"y\" to write changes to file"
			if confirm confirmMsg, commands
				writeLibraryToFile
			else
				puts "No changes saved."
			end

			puts "Cleanup finished."
		end

		def getSecondsFromDurationString durationString
			seconds = 0
			factor = 1
			factors = [1,60,60,24]

			durationString.split(':').reverse.each_with_index { |unit, index|
				factor *= factors[index]
				seconds += unit.to_f * factor
			}

			seconds
		end

		def parseOptionParameters serialized
			hash = {}

			serialized.split(',').each { |clump|
				pair = clump.split '='
				hash[pair[0]] = pair[1]
			}

			hash
		end

		def printRepeat message
			print " #{" " * @printRepeatMessage.length}\r" if @printRepeatMessage
			message = message.to_s if message.respond_to? 'to_s'
			print " #{message}\r"
			@printRepeatMessage = message.match(/\n/) ? nil : message
		end

		def cliRotate
			if not @cliRotateIndex
				@cliRotateIndex = 0
				@cliRotateCharacters = ['==', '\\\\', '||', '//']
			else
				@cliRotateIndex = (@cliRotateIndex + 1) % @cliRotateCharacters.length
			end

			@cliRotateCharacters[@cliRotateIndex]
		end

		def confirm message, commands = nil
			confirmMessage = "#{message} (y/N): "
			commandPrompt(commands, confirmMessage)[:input].match(/^[Yy]/)
		end

		def commandPrompt commands = nil, message = nil
			if commands
				commands['help'] = {
					'info' => 'show this info',
					'action' => Proc.new {
						commandInfo = []
						commands.each { |name, set|
							info = "\"#{name}\""
							info += " -- #{set['info']}" if set['info']
							commandInfo << info
						}
						puts commandInfo.join "\n"
					}
				}
			end

			prompt = Proc.new {
				puts "\n(commands: \"#{commands.keys.join '", "'}\")" if commands
				print message if message
			}
			prompt.call

			response = {
				:input => nil,
				:commands => []
			}

			while input = STDIN.gets.chomp

				if commands && !input.empty? && input[0] == '/'

					commandParts = input.match(/^\/([^\s]+)\s*(.*)/)
					commandName = commandParts[1]
					commandArgs = commandParts[2]

					if commands[commandName]
						response[:commands] << ({
							:name => commandName,
							:args => commandArgs,
							:output => commands[commandName]['action'].call(commandArgs)
						})
					else
						puts "Invalid command '#{commandName}'; available commands: #{commands.keys.join ', '}"
					end

					prompt.call

				else

					break

				end

			end

			response[:input] = input

			response
		end

		def listTrackTitles(tracks)
			tracks.map { |id, t| "#{t['title']} [#{id}]" } .join "\n"
		end

		def getTracksFromTitleList(titleString)
			tracks = {}
			titleString.chomp.lines.each { |line|
				matches = line.match(/^.*\[(.*)\]$/)
				if matches
					id = matches[1]
					tracks[id] = @library['library'][id]
				else
					puts "IGNORING: #{line}"
				end
			}

			tracks
		end

		def cloneTracks inputTracks
			tracks = []
			inputTracks.each { |id, t| tracks <<  t }
			tracks
		end

		def cloneLibraryToTracks inputLibrary
			tracks = []
			inputLibrary.each { |id, t| tracks << t }
			tracks
		end

		def cloneLibrary inputLibrary
			library = {}
			inputLibrary.each { |id, t| library[t['id']] = t }
			library
		end

		def cloneTracksToLibrary inputTracks
			library = {}
			inputTracks.each { |t| library[t['id']] = t }
			library
		end

		alias deleteStream deleteTempFile

	end

end

Tunewich::Player.new
