#!/bin/bash

showHelp() {
echo "
OPTIONS:
  -l   Send commands only on newline (enter key). By default, each character is sent immediately.
  -h   Show this help.
"
}

queueFile="$(ls -t ~/.tunewich/tmp/tunewich*-command-queue | head -1)"
commitMode=char
commandHistory=()
historyIndex=
inputLine=

while getopts l flag; do
  case $flag in
    l) commitMode=line;;
    h) showHelp; exit 0;;
  esac
done
[[ $OPTIND -gt 1 ]] && shift $((OPTIND - 1))

[[ -z "$queueFile" ]] && {
	echo "No command queue file found"
	exit 2
}

getOffsetCommand() {
	offset="$1"
	if [[ ${#commandHistory[@]} -gt 0 ]]; then
		[[ -z $historyIndex ]] && historyIndex=${#commandHistory[@]}
		historyIndex=$((historyIndex + $offset))
		if [[ $historyIndex -lt 0 ]]; then
			historyIndex=$((${#commandHistory[@]} - 1))
		fi
		if [[ $historyIndex -ge ${#commandHistory[@]} ]]; then
			historyIndex=0
		fi
		inputLine="${commandHistory[$historyIndex]}"
	fi
}

getLastCommand() {
	getOffsetCommand -1
}

getNextCommand() {
	getOffsetCommand 1
}

if [[ -n "$@" ]]; then
	echo "$@" > "$queueFile" &
elif [[ ! -t 1 || -p /dev/stdin ]]; then
	cat /dev/stdin > "$queueFile"
	echo > "$queueFile" # newline for safety
else
	echo "Beginning interactive input"
	echo "Run 'tunewich --help' to see the list of interactive commands."
	echo "Note that most interactive commands won't work, like /eq, /bpm."
	echo "Mode: $commitMode"
	echo
	echo "Ctrl+C to exit."
	echo

	prompt='tunewich $ '
	1>&2 echo -n "$prompt"
	escape_char=""
	while IFS= read -s -r -n1 ch; do

		isMultibyteChar=false
		if [[ $ch == $escape_char ]]; then
			read -rsn2 -t 1 ch # read 2 more chars
			[[ -n $ch ]] && isMultibyteChar=true
		fi

		case "$ch" in
			'')
				# surely other things will also come across as empty, besides newline?
				[[ $commitMode = line ]] && echo -e "$inputLine" > "$queueFile"
				commandHistory+=("$inputLine")
				historyIndex=
				inputLine=
				ch=$'\n'
				echo -ne "$ch";;
			$'[A') getLastCommand;;
			$'[B') getNextCommand;;
			"") inputLine=;;
			"") [[ ${#inputLine} -gt 0 ]] && inputLine="${inputLine:0:$((${#inputLine} - 1))}";;
			*) [[ $isMultibyteChar != true ]] && inputLine+="$ch";;
		esac
		1>&2 echo -ne "\r${prompt}${inputLine}"
		[[ $commitMode = char ]] && echo -ne "$ch" > "$queueFile"
	done
fi
